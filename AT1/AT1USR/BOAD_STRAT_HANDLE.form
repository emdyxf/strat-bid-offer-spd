_STRT_NEW_FORM_ 1 BOAD_STRAT_HANDLE 0^0:prec2:gblank:No:::rank_n:const_n:exp_n::1:-1::false::false:unlocked:BOAD_STRAT_HANDLE
/***************************************************
BO Strat Rule. Perform Parameters checks. And:
- If Instruction="START", send out new client orders to start strategy
- If Instruction="STOP", send out replace client orders to stop strategy
- If Instruction="RESTART", send out replace client orders to restart strategy
- If Instruction="CANCEL", send out cancel client orders to cancel strategy
**************************************************/

FTStr szPortPassed;
FTStr szInstruction;

Get_param_str(szPortPassed.str(),0);
Set_param_str("",0);

Get_param_str(szInstruction.str(),1);
Set_param_str("",1);

Pop_Msg(szPortPassed);
Pop_Msg(szInstruction);

FlexAppRules::RowInfoArray aRows;
MainGetRows(NULL, szPortPassed, aRows);

// STEP 1 : First check if all parameters are in place
static ColumnInfo clBoLeg("BO_LEG"), clBoStatus("BO_STATUS"), clBoPort("BO_PORT"), clStratId("BO_STRATID");
static ColumnInfo clBoQrdQty("BO_ORDQTY"), clBoMaxPos("BO_MAXPOS"), clLotSize("BO_LOTSIZE");
static ColumnInfo clBoPayUpTicks("BO_PAYUPTICK"), clBoMaxRpl("BO_MAXRPL"), clBoMaxLoss("BO_MAXLOSS");
static ColumnInfo clBoStgCnt("BO_STGCNT"), clBoSpdInt("BO_SPDINT");

static ColumnInfo clBoStgAd("BO_STGAD"),clBoAdInt("BO_STGIND");
static ColumnInfo clBoQuMul("BO_QUMUL"),clBoHeMul("BO_HEMUL"),clBoQuRa("BO_QURA"),clBoHeRa("BO_HERA");;

FlexAppRules::RowInfo QuoteRow, HedgeRow;
FTStr szTemp1, szTemp2;
//int	nTemp;
double dTemp1,dTemp2;

aRows[0].GetCellValue(clBoLeg, szTemp1);
if(!strcmp(szTemp1.str(), "QUOTE"))
{
	QuoteRow = aRows[0];
	HedgeRow = aRows[1];
}
else
{
	QuoteRow = aRows[1];
	HedgeRow = aRows[0];
}

// Check symbol	
szTemp1 = QuoteRow.GetSymbol();
szTemp2 = HedgeRow.GetSymbol();
if (!strlen(szTemp1.str()) || !strlen(szTemp2.str()))
{
	Pop_Msg_Color("Missing Strat symbols. Cannot start strategy!",0,"red","black");
	return true;
}

// Check StratID
dTemp1 = QuoteRow.GetCellValue(clStratId, 0.0);
dTemp2 = HedgeRow.GetCellValue(clStratId, 0.0);
if (int(dTemp1) <= 0 || int(dTemp2) <=0 )
{
	Pop_Msg_Color("Invalid Strat ID. Cannot start strategy!",0,"red","black");
	return true;
}
else if (int(dTemp1) != int(dTemp2))
{
	Pop_Msg_Color("Strat ID mis-match. Cannot start strategy!",0,"red","black");
	return true;
}

// Check Ord Qty
dTemp1 = QuoteRow.GetCellValue(clBoQrdQty, 0.0);
dTemp2 = HedgeRow.GetCellValue(clBoQrdQty, 0.0);
if (int(dTemp1) <= 0 || int(dTemp2) <=0 )
{
	Pop_Msg_Color("Invalid Order Qty. Cannot start strategy!",0,"red","black");
	return true;
}
else if (int(dTemp1) != int(dTemp2))
{
	Pop_Msg_Color("Order Qty mis-match. Cannot start strategy!",0,"red","black");
	return true;
}

// Check Max Pos
dTemp1 = QuoteRow.GetCellValue(clBoMaxPos, 0.0);
dTemp2 = HedgeRow.GetCellValue(clBoMaxPos, 0.0);
if (int(dTemp1) <= 0 || int(dTemp2) <=0 )
{
	Pop_Msg_Color("Invalid Max Pox. Cannot start strategy!",0,"red","black");
	return true;
}
else if (int(dTemp1) != int(dTemp2))
{
	Pop_Msg_Color("Max Pos mis-match. Cannot start strategy!",0,"red","black");
	return true;
}

// Check Lot Size
dTemp1 = QuoteRow.GetCellValue(clLotSize, 0.0);
dTemp2 = HedgeRow.GetCellValue(clLotSize, 0.0);
if (int(dTemp1) <= 0 || int(dTemp2) <=0 )
{
	Pop_Msg_Color("Invalid Market LotSize. Cannot start strategy!",0,"red","black");
	return true;
}

// Check PayUp Tick
dTemp1 = QuoteRow.GetCellValue(clBoPayUpTicks, 0.0);
dTemp2 = HedgeRow.GetCellValue(clBoPayUpTicks, 0.0);
if (int(dTemp1) < 0 || int(dTemp2) < 0 )
{
	Pop_Msg_Color("Invalid PayUp Tick. Cannot start strategy!",0,"red","black");
	return true;
}
else if (int(dTemp1) != int(dTemp2))
{
	Pop_Msg_Color("PayUp Tick mis-match. Cannot start strategy!",0,"red","black");
	return true;
}

//Check Max Rpl
dTemp1 = QuoteRow.GetCellValue(clBoMaxRpl, 0.0);
dTemp2 = HedgeRow.GetCellValue(clBoMaxRpl, 0.0);
if (int(dTemp1) < 0 || int(dTemp2) < 0 )
{
	Pop_Msg_Color("Invalid Max Rpl Limit. Cannot start strategy!",0,"red","black");
	return true;
}
else if (int(dTemp1) != int(dTemp2))
{
	Pop_Msg_Color("Max Rpl Limit mis-match. Cannot start strategy!",0,"red","black");
	return true;
}

//Check Max Rpl
dTemp1 = QuoteRow.GetCellValue(clBoMaxLoss, 0.0);
dTemp2 = HedgeRow.GetCellValue(clBoMaxLoss, 0.0);
if ( dTemp1 < g_dEpsilon || dTemp2 < g_dEpsilon )
{
	Pop_Msg_Color("Invalid Max Loss. Cannot start strategy!",0,"red","black");
	return true;
}
else if (fabs(dTemp1-dTemp2) > g_dEpsilon )
{
	Pop_Msg_Color("Max Loss mis-match. Cannot start strategy!",0,"red","black");
	return true;
}

// Check Stage Count
dTemp1 = QuoteRow.GetCellValue(clBoStgCnt, 0.0);
dTemp2 = HedgeRow.GetCellValue(clBoStgCnt, 0.0);
if (int(dTemp1) < 0 || int(dTemp2) < 0 )
{
	Pop_Msg_Color("Invalid Stage Count. Cannot start strategy!",0,"red","black");
	return true;
}
else if (int(dTemp1) != int(dTemp2))
{
	Pop_Msg_Color("Stage Count mis-match. Cannot start strategy!",0,"red","black");
	return true;
}

// Check Spread Interval
dTemp1 = QuoteRow.GetCellValue(clBoSpdInt, 0.0);
dTemp2 = HedgeRow.GetCellValue(clBoSpdInt, 0.0);
if (int(dTemp1) < 0 || int(dTemp2) < 0 )
{
	Pop_Msg_Color("Invalid Spread Interval. Cannot start strategy!",0,"red","black");
	return true;
}
else if (int(dTemp1) != int(dTemp2))
{
	Pop_Msg_Color("Spread Interval mis-match. Cannot start strategy!",0,"red","black");
	return true;
}

// Check Strat Port
QuoteRow.GetCellValue(clBoPort, szTemp1);
HedgeRow.GetCellValue(clBoPort, szTemp2);
if (!strlen(szTemp1.str()) || !strlen(szTemp2.str()))
{
	Pop_Msg_Color("Missing Strat portfolio. Cannot start strategy!",0,"red","black");
	return true;
}
else if (strcmp(szTemp1.str(), szTemp2.str()))
{
	Pop_Msg_Color("Strat portfolio mis-match. Cannot start strategy!",0,"red","black");
	return true;
}

//Check Adjustment
dTemp1 = QuoteRow.GetCellValue(clBoStgAd, 0.0);
dTemp2 = HedgeRow.GetCellValue(clBoStgAd, 0.0);
if (int(dTemp1) < 0 || int(dTemp2) < 0 )
{
	Pop_Msg_Color("Invalid Stage Adjustment. Cannot start strategy!",0,"red","black");
	return true;
}
else if (int(dTemp1) != int(dTemp2))
{
	Pop_Msg_Color("Stage Adjustment mis-match. Cannot start strategy!",0,"red","black");
	return true;
}

dTemp1 = QuoteRow.GetCellValue(clBoAdInt, 0.0);
dTemp2 = HedgeRow.GetCellValue(clBoAdInt, 0.0);
if (int(dTemp1) < 0 || int(dTemp2) < 0 )
{
	Pop_Msg_Color("Invalid Adjustment interval. Cannot start strategy!",0,"red","black");
	return true;
}
else if (int(dTemp1) != int(dTemp2))
{
	Pop_Msg_Color("Adjustment interval mis-match. Cannot start strategy!",0,"red","black");
	return true;
}

szTemp1=""; szTemp1="StratPort [";szTemp1+=szTemp2;szTemp1+="] : All Checks Passed. Handle Strategy Orders!";
Pop_Msg_Color(szTemp1,0,"green","black");

// STEP 2:  Check of instructions
bool bAutoEnabled = Is_Auto_Enabled();
if(!bAutoEnabled)
	Enable_Auto_Trade();

if (!strcmp(szInstruction.str(),"START"))
{
	if(QuoteRow.Run(FLEXRULE(BO_STRAT_SEND_ORDS)))	{	QuoteRow.SetCellValue(clBoStatus, STRAT_STATUS_WORKING, true);	}
	if(HedgeRow.Run(FLEXRULE(BO_STRAT_SEND_ORDS)))	{	HedgeRow.SetCellValue(clBoStatus, STRAT_STATUS_WORKING, true);	}
}
else if (!strcmp(szInstruction.str(),"STOP"))
{
	Pop_Msg1(szInstruction);
	Set_param_str("",0);	
	Set_param_str(szInstruction.str(),0);
	if(QuoteRow.Run(FLEXRULE(BO_STRAT_SEND_RPL)))	{	QuoteRow.SetCellValue(clBoStatus, START_STATUS_PAUSE, true);	}
	Set_param_str("",0);
	Set_param_str(szInstruction.str(),0);
	if(HedgeRow.Run(FLEXRULE(BO_STRAT_SEND_RPL)))	{	HedgeRow.SetCellValue(clBoStatus, START_STATUS_PAUSE, true);	}
	Set_param_str("",0);
}
else if (!strcmp(szInstruction.str(),"RESTART"))
{
	Pop_Msg1(szInstruction);
	Set_param_str("",0);	
	Set_param_str(szInstruction.str(),0);
	if(QuoteRow.Run(FLEXRULE(BO_STRAT_SEND_RPL)))	{	QuoteRow.SetCellValue(clBoStatus, STRAT_STATUS_WORKING, true);	}
	Set_param_str("",0);	
	Set_param_str(szInstruction.str(),0);
	if(HedgeRow.Run(FLEXRULE(BO_STRAT_SEND_RPL)))	{	HedgeRow.SetCellValue(clBoStatus, STRAT_STATUS_WORKING, true);	}
	Set_param_str("",0);
}
else if (!strcmp(szInstruction.str(),"CANCEL"))
{
	if(QuoteRow.Run(FLEXRULE(BO_STRAT_SEND_CXL)))	{	QuoteRow.SetCellValue(clBoStatus, STRAT_STATUS_CXLD, true);	}
	if(HedgeRow.Run(FLEXRULE(BO_STRAT_SEND_CXL)))	{	HedgeRow.SetCellValue(clBoStatus, STRAT_STATUS_CXLD, true);	}
}

return true;


_END_FORM_ *****************************************
