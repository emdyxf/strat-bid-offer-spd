_STRT_NEW_FORM_ 1 VALID_RPL 0^0:prec2:gblank:No:::rank_n:const_n:exp_n::1:-1::false::false:unlocked:VALID_RPL
/******************************************************************
Reserved Rule. Runs before sending out replace order.
******************************************************************/

char strDebug[216]="";
char strFix[216]="";
char strRule[20]="VALID_RPL";
char token[50][50];
int i = 0;

char BOStratPort[32]="";
Get_Column_Str("BO_PORT",BOStratPort);

if (strstr(BOStratPort, FLEX_OMRULE_BO_SPD)) // If BO_PORT contains FLEX_OMRULE_BO_SPD -> Send Bid-Offer Strat order to OMRule Loopback
{
	Pop_Msg("VALID_RPL: Bid-Offer Spread");
	
	Set_FixTag_Str(FIX_TAG_STRATEGYNAME,FLEX_OMRULE_BO_SPD);
	FTStr  ftDest; Get_Default_Listed_Dest(ftDest);
	Set_FixTag_Str(FIX_TAG_DESTINATION,ftDest.str());
	Set_FixTag_Str(FIX_TAG_OMUSER,"UA");
	
	FTStr szBuffer;
	double dBuffer;
	
	FTStr szBOMode;
	Get_Column_Str("BO_MODE", szBOMode.str());
	if (!strcmp(szBOMode.str(), STRAT_MODE_ALWAYS))
	{
		szBuffer = MODEID_ALWAYS;

	}
	else if (!strcmp(szBOMode.str(), STRAT_MODE_CONDITIONAL))
	{
		szBuffer = MODEID_CONDITIONAL;
	}
	else if (!strcmp(szBOMode.str(), STRAT_MODE_AGGRESSIVE))
	{
		szBuffer = MODEID_AGGRESSIVE;
	}
	else
	{
		Pop_Msg_Color("Invalid Quoting Mode! Cannot send order!", 0, "red", "black");
		szBuffer = MODEID_INVALID;
		return false;
	}
	Set_FixTag_Str(FIX_TAG_QUOTEMODE_BO, szBuffer.str());
	
	dBuffer = Value_Cell_Else("BO_STRATID", 0.0);
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_STRATID_BO, szBuffer.str());

	Get_Column_Str("BO_PORT",szBuffer.str());
	Set_FixTag_Str(FIX_TAG_STRATPORT_BO, szBuffer.str());
	
	Set_FixTag_Str(FIX_TAG_STRATSYM_BO, "");
	
	dBuffer = Value_Cell_Else("BO_ORDQTY", 0.0);
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_ORDQTY_BO, szBuffer.str());
	
	dBuffer = Value_Cell_Else("BO_MAXPOS", 0.0);
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_MAXPOS_BO, szBuffer.str());
	
	dBuffer = Value_Cell_Else("BO_LOTSIZE", 0.0);
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_LOTSIZE_BO, szBuffer.str());
	
	dBuffer = Value_Cell_Else("BO_PAYUPTICK", 0.0);
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_PAYUPTICK_BO, szBuffer.str());
	
	dBuffer = Value_Cell_Else("BO_MAXRPL", 0.0);
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_MAXRPL_BO, szBuffer.str());

	dBuffer = Value_Cell_Else("BO_STGCNT", 0.0);
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_STGMAXCOUNT_BO, szBuffer.str());
	
	dBuffer = Value_Cell_Else("BO_SPDINT", 0.0);
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_STGSPDINTERVAL_BO, szBuffer.str());
	
	dBuffer = Value_Cell_Else("BO_MAXLOSS", 0.0);
	sprintf(szBuffer.str(), "%0.4f", dBuffer);
	Set_FixTag_Str(FIX_TAG_MAXLOSS_BO, szBuffer.str());
	
	// Set Leg ID to identify the client order
	FTStr szLeg;
	Get_Column_Str("BO_LEG",szLeg.str());
	if (Get_Order_Side() == CONST_BUY_SIDE)
	{
		if (!strcmp(szLeg.str(), "QUOTE"))
		{
			Pop_Msg("Bid Quote!");
			szBuffer = LEGID_BO_BQ;
			Set_FixTag_Str(FIX_TAG_LEGID_BO, szBuffer.str());
		}
		else if (!strcmp(szLeg.str(), "HEDGE"))
		{
			Pop_Msg("Bid Hedge!");
			szBuffer = LEGID_BO_BH;
			Set_FixTag_Str(FIX_TAG_LEGID_BO, szBuffer.str());
		}
		else
		{
			Pop_Msg_Color("Invalid LEG! Cannot replace order!", 0, "red", "black");
			return false;
		}
		dBuffer = Value_Cell_Else("BO_BIDSPD", 0.0);
		sprintf(szBuffer.str(), "%0.4f", dBuffer);
		Set_FixTag_Str(FIX_TAG_BENCHMARK_BO, szBuffer.str());
	}
	else if( Get_Order_Side() == CONST_SELL_SIDE)
	{
		if (!strcmp(szLeg.str(), "QUOTE"))
		{
			Pop_Msg("Offer Quote!");
			szBuffer = LEGID_BO_OQ;
			Set_FixTag_Str(FIX_TAG_LEGID_BO, szBuffer.str());
		}
		else if (!strcmp(szLeg.str(), "HEDGE"))
		{
			Pop_Msg("Offer Hedge!");
			szBuffer = LEGID_BO_OH;
			Set_FixTag_Str(FIX_TAG_LEGID_BO, szBuffer.str());
		}
		else
		{
			Pop_Msg_Color("Invalid LEG! Cannot replace order!", 0, "red", "black");
			return false;
		}
		dBuffer = Value_Cell_Else("BO_OFFERSPD", 0.0);
		sprintf(szBuffer.str(), "%0.4f", dBuffer);
		Set_FixTag_Str(FIX_TAG_BENCHMARK_BO, szBuffer.str());
	}
	else
	{
		Pop_Msg_Color("Invalid SIDE! Cannot send order!", 0, "red", "black");
		return false;
	}
		
	dBuffer = Value_Cell_Else("BO_RUNNING", 2.0);
	if (((int)dBuffer != 0) && ((int)dBuffer != 1))
	{
		Pop_Msg_Color("Invalid RUNNING FLAG! Cannot send order!", 0, "red", "black");
		return false;
	}
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_RUNNING_BO, szBuffer.str());
	
	FTStr msgSub; msgSub="VALID_RPL: Subcribing "; msgSub+=BOStratPort;
	Pop_Msg(msgSub);

	CServerCommand cmd;
	cmd.SetCommandName("SUBSCRIBE");
	cmd.SetParam("TOPIC",BOStratPort);
	cmd.SymSendCommand();

	msgSub="VALID_RPL: Sent Subscription for "; msgSub+=BOStratPort;
	Pop_Msg(msgSub);

	Set_Send_Order_Dest(ALGO_DEST);
}
else if(strstr(BOStratPort, FLEX_OMRULE_BOAD_SPD))  //@rafael for spread adjustment
{
	Pop_Msg("VALID_RPL: Bid-Offer Spread Adjustment");
	
	Set_FixTag_Str(FIX_TAG_STRATEGYNAME,FLEX_OMRULE_BOAD_SPD);
	FTStr  ftDest; Get_Default_Listed_Dest(ftDest);
	Set_FixTag_Str(FIX_TAG_DESTINATION,ftDest.str());
	Set_FixTag_Str(FIX_TAG_OMUSER,"UA");
	
	FTStr szBuffer;
	double dBuffer;
	
	FTStr szBOMode;
	Get_Column_Str("BO_MODE", szBOMode.str());
	if (!strcmp(szBOMode.str(), STRAT_MODE_ALWAYS))
	{
		szBuffer = MODEID_ALWAYS;

	}
	else if (!strcmp(szBOMode.str(), STRAT_MODE_CONDITIONAL))
	{
		szBuffer = MODEID_CONDITIONAL;
	}
	else if (!strcmp(szBOMode.str(), STRAT_MODE_AGGRESSIVE))
	{
		szBuffer = MODEID_AGGRESSIVE;
	}
	else
	{
		Pop_Msg_Color("Invalid Quoting Mode! Cannot send order!", 0, "red", "black");
		szBuffer = MODEID_INVALID;
		return false;
	}
	Set_FixTag_Str(FIX_TAG_QUOTEMODE_BO, szBuffer.str());
	
	dBuffer = Value_Cell_Else("BO_STRATID", 0.0);
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_STRATID_BO, szBuffer.str());

	Get_Column_Str("BO_PORT",szBuffer.str());
	Set_FixTag_Str(FIX_TAG_STRATPORT_BO, szBuffer.str());
	
	Set_FixTag_Str(FIX_TAG_STRATSYM_BO, "");
	
	dBuffer = Value_Cell_Else("BO_ORDQTY", 0.0);
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_ORDQTY_BO, szBuffer.str());
	
	dBuffer = Value_Cell_Else("BO_MAXPOS", 0.0);
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_MAXPOS_BO, szBuffer.str());
	
	dBuffer = Value_Cell_Else("BO_LOTSIZE", 0.0);
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_LOTSIZE_BO, szBuffer.str());
	
	dBuffer = Value_Cell_Else("BO_PAYUPTICK", 0.0);
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_PAYUPTICK_BO, szBuffer.str());
	
	dBuffer = Value_Cell_Else("BO_MAXRPL", 0.0);
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_MAXRPL_BO, szBuffer.str());

	dBuffer = Value_Cell_Else("BO_STGCNT", 0.0);
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_STGMAXCOUNT_BO, szBuffer.str());
	
	dBuffer = Value_Cell_Else("BO_SPDINT", 0.0);
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_STGSPDINTERVAL_BO, szBuffer.str());
	
	dBuffer = Value_Cell_Else("BO_MAXLOSS", 0.0);
	sprintf(szBuffer.str(), "%0.4f", dBuffer);
	Set_FixTag_Str(FIX_TAG_MAXLOSS_BO, szBuffer.str());
	
	dBuffer = Value_Cell_Else("BO_STGAD", 0.0);
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_STGAD_BOAD, szBuffer.str());
	
	dBuffer = Value_Cell_Else("BO_ADINT", 0.0);
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_ADINT_BOAD, szBuffer.str());
	
	dBuffer = Value_Cell_Else("BO_QUMUL", 0.0);
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_QUMUL_BOAD, szBuffer.str());
	
	dBuffer = Value_Cell_Else("BO_HEMUL", 0.0);
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_HEMUL_BOAD, szBuffer.str());
	
	dBuffer = Value_Cell_Else("BO_QURA", 0.0);
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_QURA_BOAD, szBuffer.str());
	
	dBuffer = Value_Cell_Else("BO_HERA", 0.0);
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_HERA_BOAD, szBuffer.str());
	
	// Set Leg ID to identify the client order
	FTStr szLeg;
	Get_Column_Str("BO_LEG",szLeg.str());
	if (Get_Order_Side() == CONST_BUY_SIDE)
	{
		if (!strcmp(szLeg.str(), "QUOTE"))
		{
			Pop_Msg("Bid Quote!");
			szBuffer = LEGID_BO_BQ;
			Set_FixTag_Str(FIX_TAG_LEGID_BO, szBuffer.str());
		}
		else if (!strcmp(szLeg.str(), "HEDGE"))
		{
			Pop_Msg("Bid Hedge!");
			szBuffer = LEGID_BO_BH;
			Set_FixTag_Str(FIX_TAG_LEGID_BO, szBuffer.str());
		}
		else
		{
			Pop_Msg_Color("Invalid LEG! Cannot replace order!", 0, "red", "black");
			return false;
		}
		dBuffer = Value_Cell_Else("BO_BIDSPD", 0.0);
		sprintf(szBuffer.str(), "%0.4f", dBuffer);
		Set_FixTag_Str(FIX_TAG_BENCHMARK_BO, szBuffer.str());
	}
	else if( Get_Order_Side() == CONST_SELL_SIDE)
	{
		if (!strcmp(szLeg.str(), "QUOTE"))
		{
			Pop_Msg("Offer Quote!");
			szBuffer = LEGID_BO_OQ;
			Set_FixTag_Str(FIX_TAG_LEGID_BO, szBuffer.str());
		}
		else if (!strcmp(szLeg.str(), "HEDGE"))
		{
			Pop_Msg("Offer Hedge!");
			szBuffer = LEGID_BO_OH;
			Set_FixTag_Str(FIX_TAG_LEGID_BO, szBuffer.str());
		}
		else
		{
			Pop_Msg_Color("Invalid LEG! Cannot replace order!", 0, "red", "black");
			return false;
		}
		dBuffer = Value_Cell_Else("BO_OFFERSPD", 0.0);
		sprintf(szBuffer.str(), "%0.4f", dBuffer);
		Set_FixTag_Str(FIX_TAG_BENCHMARK_BO, szBuffer.str());
	}
	else
	{
		Pop_Msg_Color("Invalid SIDE! Cannot send order!", 0, "red", "black");
		return false;
	}
		
	dBuffer = Value_Cell_Else("BO_RUNNING", 2.0);
	if (((int)dBuffer != 0) && ((int)dBuffer != 1))
	{
		Pop_Msg_Color("Invalid RUNNING FLAG! Cannot send order!", 0, "red", "black");
		return false;
	}
	szBuffer= (int)dBuffer;
	Set_FixTag_Str(FIX_TAG_RUNNING_BO, szBuffer.str());
	
	FTStr msgSub; msgSub="VALID_RPL: Subcribing "; msgSub+=BOStratPort;
	Pop_Msg(msgSub);

	CServerCommand cmd;
	cmd.SetCommandName("SUBSCRIBE");
	cmd.SetParam("TOPIC",BOStratPort);
	cmd.SymSendCommand();

	msgSub="VALID_RPL: Sent Subscription for "; msgSub+=BOStratPort;
	Pop_Msg(msgSub);

	Set_Send_Order_Dest(ALGO_DEST);
}

else // If NO Strat Port -> Replace is not allowed at SHFE
{
	sprintf(strDebug,"%s: %s [RPLACE not Allowed in SHFE!]",strRule,SYM);
	Pop_Msg1(strDebug);
	return false;
}

return true;


_END_FORM_ *****************************************
